[
  1,
  0,
  0,
  [
    [
      "cc.EffectAsset",
      [
        "_name",
        "shaders",
        "techniques"
      ],
      0
    ]
  ],
  [
    [
      0,
      0,
      1,
      2,
      4
    ]
  ],
  [
    [
      0,
      "eazax-chessboard",
      [
        {
          "hash": 1250805655,
          "record": null,
          "name": "eazax-chessboard|vs|fs",
          "glsl3": {
            "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
            "frag": "\nprecision highp float;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 resolution;\n  vec2 gridSize;\n  vec4 colorA;\n  vec4 colorB;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 repeat = resolution / gridSize;\n  vec2 offset = mod(resolution, gridSize) / 2. / resolution;\n  vec2 pos = floor((v_uv0 - offset) * repeat) / 2.;\n  float checker = -fract(pos.x + pos.y);\n  o *= (checker < 0.0) ? colorA : colorB;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
          },
          "glsl1": {
            "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
            "frag": "\nprecision highp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nuniform vec2 gridSize;\nuniform vec4 colorA;\nuniform vec4 colorB;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 repeat = resolution / gridSize;\n  vec2 offset = mod(resolution, gridSize) / 2. / resolution;\n  vec2 pos = floor((v_uv0 - offset) * repeat) / 2.;\n  float checker = -fract(pos.x + pos.y);\n  o *= (checker < 0.0) ? colorA : colorB;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
          },
          "builtins": {
            "globals": {
              "blocks": [
                {
                  "name": "CCGlobal",
                  "defines": []
                }
              ],
              "samplers": []
            },
            "locals": {
              "blocks": [
                {
                  "name": "CCLocal",
                  "defines": []
                }
              ],
              "samplers": []
            }
          },
          "defines": [
            {
              "name": "USE_TEXTURE",
              "type": "boolean",
              "defines": []
            },
            {
              "name": "CC_USE_MODEL",
              "type": "boolean",
              "defines": []
            },
            {
              "name": "CC_USE_ALPHA_ATLAS_texture",
              "type": "boolean",
              "defines": [
                "USE_TEXTURE"
              ]
            },
            {
              "name": "INPUT_IS_GAMMA",
              "type": "boolean",
              "defines": [
                "USE_TEXTURE"
              ]
            },
            {
              "name": "USE_BGRA",
              "type": "boolean",
              "defines": []
            }
          ],
          "blocks": [
            {
              "name": "Properties",
              "binding": 0,
              "members": [
                {
                  "name": "resolution",
                  "type": 14,
                  "count": 1
                },
                {
                  "name": "gridSize",
                  "type": 14,
                  "count": 1
                },
                {
                  "name": "colorA",
                  "type": 16,
                  "count": 1
                },
                {
                  "name": "colorB",
                  "type": 16,
                  "count": 1
                }
              ],
              "defines": []
            }
          ],
          "samplers": [
            {
              "name": "texture",
              "type": 29,
              "count": 1,
              "binding": 30,
              "defines": [
                "USE_TEXTURE"
              ]
            }
          ]
        }
      ],
      [
        {
          "passes": [
            {
              "program": "eazax-chessboard|vs|fs",
              "blendState": {
                "targets": [
                  {
                    "blend": true
                  }
                ]
              },
              "rasterizerState": {
                "cullMode": 0
              },
              "properties": {
                "texture": {
                  "value": "white",
                  "type": 29
                },
                "resolution": {
                  "type": 14,
                  "value": [
                    500,
                    500
                  ],
                  "editor": {
                    "tooltip": "分辨率"
                  }
                },
                "gridSize": {
                  "type": 14,
                  "value": [
                    50,
                    50
                  ],
                  "editor": {
                    "tooltip": "格子尺寸"
                  }
                },
                "colorA": {
                  "type": 16,
                  "value": [
                    0.3569,
                    0.3569,
                    0.3569,
                    1
                  ],
                  "editor": {
                    "type": "color",
                    "tooltip": "颜色 1"
                  }
                },
                "colorB": {
                  "type": 16,
                  "value": [
                    0.2432,
                    0.2432,
                    0.2432,
                    1
                  ],
                  "editor": {
                    "type": "color",
                    "tooltip": "颜色 2"
                  }
                }
              }
            }
          ]
        }
      ]
    ]
  ],
  0,
  0,
  [],
  [],
  []
]