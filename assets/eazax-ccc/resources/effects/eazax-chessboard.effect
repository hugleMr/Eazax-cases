// 棋盘
// 20211223
// https://gitee.com/ifaswind/eazax-ccc/blob/master/resources/effects/eazax-chessboard.effect

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        resolution: { value: [500.0, 500.0], editor: { tooltip: '分辨率' } }
        gridSize: { value: [50.0, 50.0], editor: { tooltip: '格子尺寸' } }
        colorA: { value: [0.3569, 0.3569, 0.3569, 1.0], editor: { type: color, tooltip: '颜色 1' } }
        colorB: { value: [0.2432, 0.2432, 0.2432, 1.0], editor: { type: color, tooltip: '颜色 2' } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  // 自定义属性
  uniform Properties {
    vec2 resolution;
    vec2 gridSize;
    vec4 colorA;
    vec4 colorB;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    // 计算格子的尺寸
    vec2 repeat = resolution / gridSize;
    // 计算偏移，让不完整的格子均匀分布
    vec2 offset = mod(resolution, gridSize) / 2. / resolution;
    // 计算位置
    vec2 pos = floor((v_uv0 - offset) * repeat) / 2.;
    // 取两轴之和的小数部分
    float checker = -fract(pos.x + pos.y);
    // 取色
    o *= (checker < 0.0) ? colorA : colorB;

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
